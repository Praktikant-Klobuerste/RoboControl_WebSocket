"use strict";(self.webpackChunkrobo_control_web_socket=self.webpackChunkrobo_control_web_socket||[]).push([[606],{7700:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var i=r(4848),t=r(8453);const s={},o="filesystem.h",l={id:"c-files/filesystem_h",title:"filesystem.h",description:"",source:"@site/docs/c-files/filesystem_h.md",sourceDirName:"c-files",slug:"/c-files/filesystem_h",permalink:"/RoboControl_WebSocket/docs/c-files/filesystem_h",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/c-files/filesystem_h.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"RoboControl.ino",permalink:"/RoboControl_WebSocket/docs/c-files/RoboControl_ino"}},a={},c=[];function f(e){const n={code:"code",h1:"h1",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"filesystemh",children:"filesystem.h"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'#include <ArduinoJson.h>\r\n#include "LittleFS.h"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"StaticJsonDocument<512> config;\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'void writeFile(fs::FS &fs, const char *path, const char *message, const char *mode) {\r\n  Serial.printf("\\nWriting file: %s\\r\\n", path);\r\n\r\n  File file = fs.open(path, mode);\r\n  if (!file) {\r\n    Serial.println("- failed to open file for writing");\r\n    return;\r\n  }\r\n  if (file.print(message)) {\r\n    Serial.println("- file written");\r\n  } else {\r\n    Serial.println("- write failed");\r\n  }\r\n  file.close();\r\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'bool loadFile(fs::FS &fs, const char *path)\r\n// Load existing configuration file\r\n{\r\n  String input;\r\n\r\n  if (fs.exists(path)) {\r\n    // The file exists, reading and loading\r\n    Serial.printf("\\nreading File: %s\\n", path);\r\n    File file = fs.open(path, "r");\r\n    if (file) {\r\n      Serial.println("Opening file:");\r\n\r\n      while (file.available()) {\r\n        char intRead = file.read();\r\n        input += intRead;\r\n      }\r\n\r\n      DeserializationError error = deserializeJson(config, input);\r\n      file.close();\r\n\r\n      if (!error) {\r\n        serializeJsonPretty(config, Serial);\r\n\r\n        return true;\r\n      } else {\r\n        Serial.print(F("deserializeJson() failed: "));\r\n        Serial.println(error.f_str());\r\n      }\r\n    } else {\r\n      Serial.println("Failed to open file for reading");\r\n    }\r\n  }\r\n  return false;\r\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var i=r(6540);const t={},s=i.createContext(t);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);